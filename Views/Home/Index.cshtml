

@model _10xErp.Models.SalesQuotationViewModel
@{
    ViewBag.Title = "Sales Quotation Dashboard";
}
<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">
            <i class="fa fa-chart-line text-danger me-2"></i> Sales Quotation Dashboard
        </h2>
    </div>

    <!-- KPI Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-6 col-lg-3">
            <div class="card shadow border-0 text-white bg-gradient-primary kpi-card">
                <div class="card-body text-center">
                    <i class="fa fa-file-alt fa-2x mb-2"></i>
                    <h6 class="text-uppercase">Open Quotations</h6>
                    <h2 class="fw-bold">@Model.OpenQuotations</h2>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="card shadow border-0 text-white bg-gradient-success kpi-card">
                <div class="card-body text-center">
                    <i class="fa fa-check-circle fa-2x mb-2"></i>
                    <h6 class="text-uppercase">Converted Orders</h6>
                    <h2 class="fw-bold">@Model.ConvertedOrders</h2>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="card shadow border-0 text-white bg-gradient-info kpi-card">
                <div class="card-body text-center">
                    <i class="fa fa-calendar-alt fa-2x mb-2"></i>
                    <h6 class="text-uppercase">Monthly Quotations</h6>
                    <h2 class="fw-bold">@Model.MonthlyQuotations.Sum(x => x.Value)</h2>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-lg-3">
            <div class="card shadow border-0 text-white bg-gradient-warning kpi-card">
                <div class="card-body text-center">
                    <i class="fa fa-shopping-cart fa-2x mb-2"></i>
                    <h6 class="text-uppercase">Monthly Orders</h6>
                    <h2 class="fw-bold">@Model.MonthlyOrders.Sum(x => x.Value)</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row g-4">
        <div class="col-lg-6">
            <div class="card shadow border-0">
                <div class="card-header bg-danger text-white fw-bold">
                    <i class="fa fa-file-alt me-2"></i> Monthly Sales Quotations
                </div>
                <div class="card-body">
                    <canvas id="quotationChart" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow border-0">
                <div class="card-header bg-success text-white fw-bold">
                    <i class="fa fa-check-circle me-2"></i> Monthly Converted Orders
                </div>
                <div class="card-body">
                    <canvas id="orderChart" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom Styles -->
<style>
    .kpi-card {
        border-radius: 1rem;
        transition: transform 0.2s ease-in-out;
    }

        .kpi-card:hover {
            transform: translateY(-5px);
        }

    .bg-gradient-primary {
        background: linear-gradient(135deg, #0d6efd, #6610f2);
    }

    .bg-gradient-success {
        background: linear-gradient(135deg, #198754, #20c997);
    }

    .bg-gradient-info {
        background: linear-gradient(135deg, #0dcaf0, #0d6efd);
    }

    .bg-gradient-warning {
        background: linear-gradient(135deg, #ffc107, #fd7e14);
    }
</style>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var quotationData = {
        labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlyQuotations.Select(x => x.Label))),
        datasets: [{
            label: 'Quotations',
            data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlyQuotations.Select(x => x.Value))),
            borderColor: '#dc3545',
            backgroundColor: 'rgba(220,53,69,0.4)',
            borderWidth: 2,
            fill: true,
            tension: 0.4,
            pointBackgroundColor: '#dc3545'
        }]
    };

    var orderData = {
        labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlyOrders.Select(x => x.Label))),
        datasets: [{
            label: 'Orders',
            data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlyOrders.Select(x => x.Value))),
            borderColor: '#28a745',
            backgroundColor: 'rgba(40,167,69,0.4)',
            borderWidth: 2,
            fill: true,
            tension: 0.4,
            pointBackgroundColor: '#28a745'
        }]
    };

    new Chart(document.getElementById("quotationChart"), { type: 'line', data: quotationData });
    new Chart(document.getElementById("orderChart"), { type: 'line', data: orderData });
</script>

