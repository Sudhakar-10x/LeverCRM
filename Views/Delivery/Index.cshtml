@model _10xErp.Models.DeliveryOrderViewModel

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox">
                <div class="ibox-title">
                    <h5>Delivery Document List</h5>
                    <div class="text-right m-b-2" style="position: absolute; right: 30px; top: 15px;">
                        <a href="@Url.Action("Create", "Delivery")" class="btn btn-primary">
                            <i class="fa fa-plus"></i> Add Delivery Document
                        </a>
                    </div>
                </div>

                <div class="ibox-content">

                    <div class="form-group row align-items-center">
                        <label for="fromDate" class="col-sm-1 col-form-label">From Date</label>
                        <div class="col-sm-3">
                            <input type="date" id="fromDate" class="form-control" />
                        </div>

                        <label for="toDate" class="col-sm-1 col-form-label">To Date</label>
                        <div class="col-sm-3">
                            <input type="date" id="toDate" class="form-control" />
                        </div>

                        <div class="col-sm-4">
                            <button id="loadDataBtn" class="btn btn-primary">Load</button>
                        </div>
                    </div>


                    <!-- Table -->
                    <div class="table-responsive">
                        <table id="itemTable" class="table table-striped table-bordered dataTable table-hover nowrap" style="width:100%">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>DocNum</th>
                                    <th>DocEntry</th>
                                    <th>CardCode</th>
                                    <th>CardName</th>
                                    <th>NumAtCard</th>
                                    <th>CreateDate</th>
                                    <th>DocTotal</th>
                                    <th>CreatedBy</th>
                                    <th>TotalQty</th>
                                    <th>View</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<!-- Custom styles -->
<style>
    .filter-section {
        margin-bottom: 20px;
    }

    #itemTable th, #itemTable td {
        vertical-align: middle !important;
    }

    #itemTable thead th {
        white-space: nowrap;
    }
</style>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>

    <script>
        $(document).ready(function () {
            function getDefaultDateRange() {
                const start = moment().startOf('month').format('YYYY-MM-DD');
                const end = moment().endOf('month').format('YYYY-MM-DD');
                return { fromDate: start, toDate: end };
            }

            // ✅ Set default dates on page load
            const defaults = getDefaultDateRange();
            $('#fromDate').val(defaults.fromDate);
            $('#toDate').val(defaults.toDate);

            const detailsUrlTemplate = '@Url.Action("DeliveryDocumentDetails", "Delivery", new { id = "__id__" })';

            var table = $('#itemTable').DataTable({
                ajax: {
                    url: '@Url.Action("GetItemDetailsList", "Delivery")',
                    data: function (d) {
                        let fromDate = $('#fromDate').val();
                        let toDate = $('#toDate').val();

                        if (!fromDate || !toDate) {
                            const defaults = getDefaultDateRange();
                            fromDate = defaults.fromDate;
                            toDate = defaults.toDate;
                        }

                        d.fromDate = fromDate;
                        d.toDate = toDate;
                    }
                },
                columns: [
                    { data: null },
                    { data: 'DocNum', className: 'text-right' },
                    { data: 'DocEntry', className: 'text-right' },
                    { data: 'CardCode', className: 'text-right' },
                    { data: 'CardName', className: 'text-left' },
                    { data: 'NumAtCard', className: 'text-left' },
                    {
                        data: 'CreateDate',
                        className: 'text-right',
                        render: function (data) {
                            return data ? moment(data).format('YYYY-MM-DD') : '';
                        }
                    },
                    {
                        data: 'DocTotal',
                        className: 'text-right',
                        render: $.fn.dataTable.render.number(',', '.', 2, '')
                    },
                    { data: 'CreatedBy', className: 'text-left' },
                    { data: 'TotalQty', className: 'text-right' },
                    {
                        data: null,
                        orderable: false,
                        searchable: false,
                        className: 'text-center',
                        render: function (data, type, row) {
                            //return `<a href="/Delivery/DeliveryDocumentDetails/${row.DocEntry}" title="View Details">
                            //            <i class="fa fa-eye"></i>
                            //        </a>`;
                            const detailsUrl = detailsUrlTemplate.replace('__id__', row.DocEntry);
                            return `<a href="${detailsUrl}" title="View Details"><i class="fa fa-eye"></i></a>`;

                        }
                    }
                ],
                order: [[1, 'desc']],
                responsive: true,
                autoWidth: false,
                scrollX: true,
                scrollY: '400px',
                scrollCollapse: true,
                language: {
                    emptyTable: "No records available"
                },
                initComplete: function () {
                    this.api().columns.adjust();
                },
                drawCallback: function () {
                    var api = this.api();
                    var pageInfo = api.page.info();
                    api.column(0, { page: 'current' }).nodes().each(function (cell, i) {
                        cell.innerHTML = pageInfo.start + i + 1;
                    });

                    // Adjust columns on every draw
                    api.columns.adjust();
                }
            });

            // ✅ Load button functionality
            $('#loadDataBtn').click(function () {
                table.ajax.reload(null, false); // retain pagination
            });

            // ✅ Responsive column adjustment on various events
            $(window).on('resize', function () {
                table.columns.adjust();
            });

            // On pagination
            table.on('page.dt', function () {
                table.columns.adjust();
            });

            // On search
            table.on('search.dt', function () {
                table.columns.adjust();
            });

            // On ordering
            table.on('order.dt', function () {
                table.columns.adjust();
            });
        });
    </script>
}


